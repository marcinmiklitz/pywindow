import unittest
import numpy as np
import pywindow as pw

system = {
    'coordinates': np.array([
        [11.496, 13.515, 17.91],
        [11.069, 15.133, 15.579],
        [10.304, 14.027, 15.915],
        [10.627, 13.212, 17.085],
        [11.693, 12.648, 19.061],
        [11.423, 13.456, 20.321],
        [11.696, 12.616, 21.561],
        [11.805, 15.351, 16.105],
        [10.153, 12.422, 17.214],
        [11.076, 11.889, 19.014],
        [10.498, 13.752, 20.326],
        [11.991, 14.243, 20.331],
        [11.51, 13.134, 22.36],
        [11.115, 11.837, 21.566],
        [13.304, 11.285, 17.91],
        [13.731,  9.667, 15.579],
        [14.496, 10.773, 15.915],
        [14.173, 11.588, 17.085],
        [13.107, 12.152, 19.061],
        [13.377, 11.344, 20.321],
        [13.104, 12.184, 21.561],
        [12.995,  9.449, 16.105],
        [14.647, 12.378, 17.214],
        [13.724, 12.911, 19.014],
        [14.302, 11.048, 20.326],
        [12.809, 10.557, 20.331],
        [13.29, 11.666, 22.36],
        [13.685, 12.963, 21.566],
        [11.496, 11.285,  6.89],
        [11.069,  9.667,  9.221],
        [10.304, 10.773,  8.885],
        [10.627, 11.588,  7.715],
        [11.693, 12.152,  5.739],
        [11.423, 11.344,  4.479],
        [11.696, 12.184,  3.239],
        [11.805,  9.449,  8.695],
        [10.153, 12.378,  7.586],
        [11.076, 12.911,  5.786],
        [10.498, 11.048,  4.474],
        [11.991, 10.557,  4.469],
        [11.51, 11.666,  2.44],
        [11.115, 12.963,  3.234],
        [13.304, 13.515,  6.89],
        [13.731, 15.133,  9.221],
        [14.496, 14.027,  8.885],
        [14.173, 13.212,  7.715],
        [13.107, 12.648,  5.739],
        [13.377, 13.456,  4.479],
        [13.104, 12.616,  3.239],
        [12.995, 15.351,  8.695],
        [14.647, 12.422,  7.586],
        [13.724, 11.889,  5.786],
        [14.302, 13.752,  4.474],
        [12.809, 14.243,  4.469],
        [13.29, 13.134,  2.44],
        [13.685, 11.837,  3.234],
        [13.515,  6.89, 13.304],
        [15.133,  9.221, 13.731],
        [14.027,  8.885, 14.496],
        [13.212,  7.715, 14.173],
        [12.648,  5.739, 13.107],
        [13.456,  4.479, 13.377],
        [12.616,  3.239, 13.104],
        [15.351,  8.695, 12.995],
        [12.422,  7.586, 14.647],
        [11.889,  5.786, 13.724],
        [13.752,  4.474, 14.302],
        [14.243,  4.469, 12.809],
        [13.134,  2.44, 13.29],
        [11.837,  3.234, 13.685],
        [11.285,  6.89, 11.496],
        [9.667,  9.221, 11.069],
        [10.773,  8.885, 10.304],
        [11.588,  7.715, 10.627],
        [12.152,  5.739, 11.693],
        [11.344,  4.479, 11.423],
        [12.184,  3.239, 11.696],
        [9.449,  8.695, 11.805],
        [12.378,  7.586, 10.153],
        [12.911,  5.786, 11.076],
        [11.048,  4.474, 10.498],
        [10.557,  4.469, 11.991],
        [11.666,  2.44, 11.51],
        [12.963,  3.234, 11.115],
        [11.285, 17.91, 13.304],
        [9.667, 15.579, 13.731],
        [10.773, 15.915, 14.496],
        [11.588, 17.085, 14.173],
        [12.152, 19.061, 13.107],
        [11.344, 20.321, 13.377],
        [12.184, 21.561, 13.104],
        [9.449, 16.105, 12.995],
        [12.378, 17.214, 14.647],
        [12.911, 19.014, 13.724],
        [11.048, 20.326, 14.302],
        [10.557, 20.331, 12.809],
        [11.666, 22.36, 13.29],
        [12.963, 21.566, 13.685],
        [13.515, 17.91, 11.496],
        [15.133, 15.579, 11.069],
        [14.027, 15.915, 10.304],
        [13.212, 17.085, 10.627],
        [12.648, 19.061, 11.693],
        [13.456, 20.321, 11.423],
        [12.616, 21.561, 11.696],
        [15.351, 16.105, 11.805],
        [12.422, 17.214, 10.153],
        [11.889, 19.014, 11.076],
        [13.752, 20.326, 10.498],
        [14.243, 20.331, 11.991],
        [13.134, 22.36, 11.51],
        [11.837, 21.566, 11.115],
        [6.89, 11.496, 11.285],
        [9.221, 11.069,  9.667],
        [8.885, 10.304, 10.773],
        [7.715, 10.627, 11.588],
        [5.739, 11.693, 12.152],
        [4.479, 11.423, 11.344],
        [3.239, 11.696, 12.184],
        [8.695, 11.805,  9.449],
        [7.586, 10.153, 12.378],
        [5.786, 11.076, 12.911],
        [4.474, 10.498, 11.048],
        [4.469, 11.991, 10.557],
        [2.44, 11.51, 11.666],
        [3.234, 11.115, 12.963],
        [6.89, 13.304, 13.515],
        [9.221, 13.731, 15.133],
        [8.885, 14.496, 14.027],
        [7.715, 14.173, 13.212],
        [5.739, 13.107, 12.648],
        [4.479, 13.377, 13.456],
        [3.239, 13.104, 12.616],
        [8.695, 12.995, 15.351],
        [7.586, 14.647, 12.422],
        [5.786, 13.724, 11.889],
        [4.474, 14.302, 13.752],
        [4.469, 12.809, 14.243],
        [2.44, 13.29, 13.134],
        [3.234, 13.685, 11.837],
        [17.91, 11.496, 13.515],
        [15.579, 11.069, 15.133],
        [15.915, 10.304, 14.027],
        [17.085, 10.627, 13.212],
        [19.061, 11.693, 12.648],
        [20.321, 11.423, 13.456],
        [21.561, 11.696, 12.616],
        [16.105, 11.805, 15.351],
        [17.214, 10.153, 12.422],
        [19.014, 11.076, 11.889],
        [20.326, 10.498, 13.752],
        [20.331, 11.991, 14.243],
        [22.36, 11.51, 13.134],
        [21.566, 11.115, 11.837],
        [17.91, 13.304, 11.285],
        [15.579, 13.731,  9.667],
        [15.915, 14.496, 10.773],
        [17.085, 14.173, 11.588],
        [19.061, 13.107, 12.152],
        [20.321, 13.377, 11.344],
        [21.561, 13.104, 12.184],
        [16.105, 12.995,  9.449],
        [17.214, 14.647, 12.378],
        [19.014, 13.724, 12.911],
        [20.326, 14.302, 11.048],
        [20.331, 12.809, 10.557],
        [22.36, 13.29, 11.666],
        [21.566, 13.685, 12.963]
        ]),
    'elements': np.array([
        'N', 'C', 'C', 'C', 'C', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H',
        'H', 'N', 'C', 'C', 'C', 'C', 'C', 'C', 'H', 'H', 'H', 'H', 'H',
        'H', 'H', 'N', 'C', 'C', 'C', 'C', 'C', 'C', 'H', 'H', 'H', 'H',
        'H', 'H', 'H', 'N', 'C', 'C', 'C', 'C', 'C', 'C', 'H', 'H', 'H',
        'H', 'H', 'H', 'H', 'N', 'C', 'C', 'C', 'C', 'C', 'C', 'H', 'H',
        'H', 'H', 'H', 'H', 'H', 'N', 'C', 'C', 'C', 'C', 'C', 'C', 'H',
        'H', 'H', 'H', 'H', 'H', 'H', 'N', 'C', 'C', 'C', 'C', 'C', 'C',
        'H', 'H', 'H', 'H', 'H', 'H', 'H', 'N', 'C', 'C', 'C', 'C', 'C',
        'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'N', 'C', 'C', 'C', 'C',
        'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'N', 'C', 'C', 'C',
        'C', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'N', 'C', 'C',
        'C', 'C', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'N', 'C',
        'C', 'C', 'C', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H'
        ])
    }


class TestValidateCC3(unittest.TestCase):
    """Validate all features for CC3."""

    def test_calculate_centre_of_mass(self):
        molsys = pw.MolecularSystem.load_system(system, 'test')
        mol = molsys.system_to_molecule()

        np.testing.assert_almost_equal(mol.calculate_centre_of_mass(),
                                       np.array([12.4, 12.4, 12.4]))

    def test_calculate_maximum_diameter(self):
        molsys = pw.MolecularSystem.load_system(system, 'test')
        mol = molsys.system_to_molecule()

        np.testing.assert_almost_equal(mol.calculate_maximum_diameter(),
                                       22.179369990077188, decimal=3)

    def test_calculate_average_diameter(self):
        molsys = pw.MolecularSystem.load_system(system, 'test')
        mol = molsys.system_to_molecule()

        np.testing.assert_almost_equal(mol.calculate_average_diameter(),
                                       13.832017514255472, decimal=3)

    def test_calculate_pore_diameter(self):
        molsys = pw.MolecularSystem.load_system(system, 'test')
        mol = molsys.system_to_molecule()

        np.testing.assert_almost_equal(mol.calculate_pore_diameter(),
                                       5.397020177310022, decimal=3)

    def test_calculate_pore_volume(self):
        molsys = pw.MolecularSystem.load_system(system, 'test')
        mol = molsys.system_to_molecule()

        np.testing.assert_almost_equal(mol.calculate_pore_volume(),
                                       82.31154385154417, decimal=3)

    def test_calculate_pore_diameter_opt(self):
        molsys = pw.MolecularSystem.load_system(system, 'test')
        mol = molsys.system_to_molecule()

        np.testing.assert_almost_equal(mol.calculate_pore_diameter_opt(),
                                       5.397020177310022, decimal=3)

    def test_calculate_pore_volume_opt(self):
        molsys = pw.MolecularSystem.load_system(system, 'test')
        mol = molsys.system_to_molecule()

        np.testing.assert_almost_equal(mol.calculate_pore_volume_opt(),
                                       82.31154385154417, decimal=3)

    def test_calculate_windows(self):
        molsys = pw.MolecularSystem.load_system(system, 'test')
        mol = molsys.system_to_molecule()
        mol.calculate_windows()
        windows = mol.properties['windows']['diameters']
        coms = mol.properties['windows']['centre_of_mass']

        p = windows.argsort()

        win_ref = np.array([3.63778746, 3.63562103, 3.63707237, 3.62896512])
        com_ref = np.array([[10.77105705, 10.77097707, 14.02893956],
                            [14.01544846, 14.0154126,  14.01539845],
                            [10.77542236, 14.02453217, 10.77546634],
                            [13.92965524, 10.87029766, 10.87034163]])

        p_ref = win_ref.argsort()

        np.testing.assert_almost_equal(
            windows[p], win_ref[p_ref], decimal=3
        )

        np.testing.assert_almost_equal(
            coms[p], com_ref[p_ref], decimal=3
        )


if __name__ == '__main__':
    unittest.main()
